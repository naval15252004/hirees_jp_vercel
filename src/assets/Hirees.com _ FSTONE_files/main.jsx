import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/main.jsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=d32fe4b4"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=d32fe4b4"; const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react; const lazy = __vite__cjsImport3_react["lazy"]; const Suspense = __vite__cjsImport3_react["Suspense"];
import __vite__cjsImport4_reactDom_client from "/node_modules/.vite/deps/react-dom_client.js?v=d32fe4b4"; const ReactDOM = __vite__cjsImport4_reactDom_client.__esModule ? __vite__cjsImport4_reactDom_client.default : __vite__cjsImport4_reactDom_client;
import "/src/index.css?t=1746489503001";
import { Provider } from "/node_modules/.vite/deps/react-redux.js?v=d32fe4b4";
import store from "/src/redux/store.js";
import { persistStore } from "/node_modules/.vite/deps/redux-persist.js?v=d32fe4b4";
import { PersistGate } from "/node_modules/.vite/deps/redux-persist_integration_react.js?v=d32fe4b4";
const App = lazy(_c = () => import("/src/App.jsx?t=1746489503001"));
_c2 = App;
const Toaster = lazy(
  _c3 = () => import("/src/components/ui/sonner.jsx").then((module) => ({
    default: module.Toaster
  }))
);
_c4 = Toaster;
const LandingPage = () => /* @__PURE__ */ jsxDEV("div", { className: "min-h-screen bg-gradient-to-r from-blue-600 to-blue-800 flex flex-col justify-center items-center text-white", children: [
  /* @__PURE__ */ jsxDEV("div", { className: "text-center py-16 px-4", children: [
    /* @__PURE__ */ jsxDEV("h1", { className: "text-5xl font-extrabold mb-4", children: "Welcome to Hirees" }, void 0, false, {
      fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
      lineNumber: 249,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ jsxDEV("p", { className: "text-lg mb-8", children: "Your next job is just a click away. Explore opportunities, find your dream job, and connect with top employers." }, void 0, false, {
      fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
      lineNumber: 252,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ jsxDEV(
      "a",
      {
        href: "#explore",
        className: "bg-yellow-500 text-black font-semibold px-8 py-3 rounded-full shadow-lg transition-all duration-300 hover:bg-yellow-400 transform hover:scale-105",
        children: "Explore Opportunities"
      },
      void 0,
      false,
      {
        fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
        lineNumber: 255,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, true, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 248,
    columnNumber: 5
  }, this),
  /* @__PURE__ */ jsxDEV("footer", { className: "bg-gray-800 text-center text-white py-4 w-full mt-16", children: /* @__PURE__ */ jsxDEV("p", { children: "Â© 2025 Hirees. All Rights Reserved." }, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 265,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 264,
    columnNumber: 5
  }, this)
] }, void 0, true, {
  fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
  lineNumber: 247,
  columnNumber: 1
}, this);
_c5 = LandingPage;
const persistor = persistStore(store);
const preloadComponents = () => {
  const preloadApp = () => import("/src/App.jsx?t=1746489503001");
  const preloadToaster = () => import("/src/components/ui/sonner.jsx");
  Promise.all([preloadApp(), preloadToaster()]).catch((error) => {
    console.error("Error preloading components:", error);
  });
};
ReactDOM.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsxDEV(React.StrictMode, { children: /* @__PURE__ */ jsxDEV(Provider, { store, children: /* @__PURE__ */ jsxDEV(PersistGate, { loading: /* @__PURE__ */ jsxDEV(LandingPage, {}, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 286,
    columnNumber: 29
  }, this), persistor, children: /* @__PURE__ */ jsxDEV(Suspense, { fallback: /* @__PURE__ */ jsxDEV(LandingPage, {}, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 287,
    columnNumber: 29
  }, this), children: [
    /* @__PURE__ */ jsxDEV(App, {}, void 0, false, {
      fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
      lineNumber: 288,
      columnNumber: 11
    }, this),
    /* @__PURE__ */ jsxDEV(Suspense, { fallback: null, children: /* @__PURE__ */ jsxDEV(Toaster, {}, void 0, false, {
      fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
      lineNumber: 290,
      columnNumber: 13
    }, this) }, void 0, false, {
      fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
      lineNumber: 289,
      columnNumber: 11
    }, this)
  ] }, void 0, true, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 287,
    columnNumber: 9
  }, this) }, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 286,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 285,
    columnNumber: 5
  }, this) }, void 0, false, {
    fileName: "/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx",
    lineNumber: 284,
    columnNumber: 3
  }, this)
);
if (typeof requestIdleCallback === "function") {
  requestIdleCallback(preloadComponents);
} else {
  setTimeout(preloadComponents, 1e3);
}
var _c, _c2, _c3, _c4, _c5;
$RefreshReg$(_c, "App$lazy");
$RefreshReg$(_c2, "App");
$RefreshReg$(_c3, "Toaster$lazy");
$RefreshReg$(_c4, "Toaster");
$RefreshReg$(_c5, "LandingPage");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("/Users/naval/Desktop/internship/jobportal_development/JObPortal_DyNamo_clean/frontend/src/main.jsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,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S0FBQUksS0FBQUU7QUFBQWdCLGFBQUF6QixJQUFBO0FBQUF5QixhQUFBeEIsS0FBQTtBQUFBd0IsYUFBQXRCLEtBQUE7QUFBQXNCLGFBQUFsQixLQUFBO0FBQUFrQixhQUFBaEIsS0FBQSIsIm5hbWVzIjpbIlJlYWN0IiwibGF6eSIsIlN1c3BlbnNlIiwiUmVhY3RET00iLCJQcm92aWRlciIsInN0b3JlIiwicGVyc2lzdFN0b3JlIiwiUGVyc2lzdEdhdGUiLCJBcHAiLCJfYyIsIl9jMiIsIlRvYXN0ZXIiLCJfYzMiLCJ0aGVuIiwibW9kdWxlIiwiZGVmYXVsdCIsIl9jNCIsIkxhbmRpbmdQYWdlIiwiX2M1IiwicGVyc2lzdG9yIiwicHJlbG9hZENvbXBvbmVudHMiLCJwcmVsb2FkQXBwIiwicHJlbG9hZFRvYXN0ZXIiLCJQcm9taXNlIiwiYWxsIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJjcmVhdGVSb290IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlbmRlciIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiJFJlZnJlc2hSZWckIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIm1haW4uanN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIC8vIGltcG9ydCBSZWFjdCwgeyBsYXp5LCBTdXNwZW5zZSB9IGZyb20gJ3JlYWN0Jztcbi8vIC8vIGltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20vY2xpZW50Jztcbi8vIC8vIGltcG9ydCAnLi9pbmRleC5jc3MnO1xuLy8gLy8gaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG4vLyAvLyBpbXBvcnQgc3RvcmUgZnJvbSAnLi9yZWR1eC9zdG9yZS5qcyc7XG4vLyAvLyBpbXBvcnQgeyBwZXJzaXN0U3RvcmUgfSBmcm9tICdyZWR1eC1wZXJzaXN0Jztcbi8vIC8vIGltcG9ydCB7IFBlcnNpc3RHYXRlIH0gZnJvbSAncmVkdXgtcGVyc2lzdC9pbnRlZ3JhdGlvbi9yZWFjdCc7XG5cbi8vIC8vIC8vIExhenkgbG9hZCBjb21wb25lbnRzIHdpdGggZXhwbGljaXQgaW1wb3J0c1xuLy8gLy8gY29uc3QgQXBwID0gbGF6eSgoKSA9PiAvKiBAdml0ZS1pZ25vcmUgKi8gaW1wb3J0KCcuL0FwcC5qc3gnKSk7XG4vLyAvLyBjb25zdCBUb2FzdGVyID0gbGF6eSgoKSA9PlxuLy8gLy8gICBpbXBvcnQoJy4vY29tcG9uZW50cy91aS9zb25uZXIuanN4JykudGhlbihtb2R1bGUgPT4gKHtcbi8vIC8vICAgICBkZWZhdWx0OiBtb2R1bGUuVG9hc3RlclxuLy8gLy8gICB9KSlcbi8vIC8vICk7XG5cbi8vIC8vIC8vIExvYWRpbmcgY29tcG9uZW50XG4vLyAvLyBjb25zdCBMb2FkaW5nU3Bpbm5lciA9ICgpID0+IChcbi8vIC8vICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tZ3JheS01MCB0by1ibHVlLTUwXCI+XG4vLyAvLyAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHB4LTRcIj5cbi8vIC8vICAgICAgIHsvKiBCcmFuZCBTZWN0aW9uICovfVxuLy8gLy8gICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtYi04IGFuaW1hdGUtZmFkZS1pblwiPlxuLy8gLy8gICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC01eGwgZm9udC1ib2xkIHRleHQtYmx1ZS02MDBcIj5cbi8vIC8vICAgICAgICAgICBIaXJlZXNcbi8vIC8vICAgICAgICAgPC9oMT5cbi8vIC8vICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTEgdy0yNCBiZy1ncmFkaWVudC10by1yIGZyb20tYmx1ZS02MDAgdG8taW5kaWdvLTYwMCBteC1hdXRvIG10LTJcIiAvPlxuLy8gLy8gICAgICAgPC9kaXY+XG5cbi8vIC8vICAgICAgIHsvKiBMb2FkaW5nIENhcmQgKi99XG4vLyAvLyAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXdoaXRlLzgwIGJhY2tkcm9wLWJsdXItc20gcm91bmRlZC0yeGwgcC04IHNoYWRvdy14bCB3LWZ1bGwgbWF4LXctbGcgYW5pbWF0ZS1zbGlkZS11cFwiPlxuLy8gLy8gICAgICAgICB7LyogU3Bpbm5lciAqL31cbi8vIC8vICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBtYi00XCI+XG4vLyAvLyAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTggaC04IGJvcmRlci00IGJvcmRlci1ibHVlLTYwMCBib3JkZXItdC10cmFuc3BhcmVudCByb3VuZGVkLWZ1bGwgYW5pbWF0ZS1zcGluXCIgLz5cbi8vIC8vICAgICAgICAgPC9kaXY+XG5cbi8vIC8vICAgICAgICAgey8qIFN0YXR1cyAqL31cbi8vIC8vICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTNcIj5cbi8vIC8vICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtZ3JheS04MDAgdGV4dC1jZW50ZXJcIj5cbi8vIC8vICAgICAgICAgICAgIEluaXRpYWxpemluZyBZb3VyIEV4cGVyaWVuY2Vcbi8vIC8vICAgICAgICAgICA8L2gyPlxuXG4vLyAvLyAgICAgICAgICAgey8qIFByb2dyZXNzIEJhciAqL31cbi8vIC8vICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtMiBiZy1ncmF5LTEwMCByb3VuZGVkLWZ1bGwgb3ZlcmZsb3ctaGlkZGVuXCI+XG4vLyAvLyAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtZnVsbCBiZy1ncmFkaWVudC10by1yIGZyb20tYmx1ZS02MDAgdG8taW5kaWdvLTYwMCBhbmltYXRlLXByb2dyZXNzXCIgLz5cbi8vIC8vICAgICAgICAgICA8L2Rpdj5cblxuLy8gLy8gICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTYwMCB0ZXh0LWNlbnRlclwiPlxuLy8gLy8gICAgICAgICAgICAgUGxlYXNlIHdhaXQgd2hpbGUgd2UgcmVkaXJlY3QgeW91IHRvIHlvdXIgcmVxdWVzdGVkIHBhZ2Vcbi8vIC8vICAgICAgICAgICA8L3A+XG4vLyAvLyAgICAgICAgIDwvZGl2PlxuLy8gLy8gICAgICAgPC9kaXY+XG5cbi8vIC8vICAgICAgIHsvKiBGb290ZXIgKi99XG4vLyAvLyAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTYgdGV4dC1jZW50ZXIgYW5pbWF0ZS1mYWRlLWluXCI+XG4vLyAvLyAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTUwMFwiPlxuLy8gLy8gICAgICAgICAgIE9wdGltaXppbmcgeW91ciBleHBlcmllbmNlIGZvciB0aGUgYmVzdCBwZXJmb3JtYW5jZVxuLy8gLy8gICAgICAgICA8L3A+XG4vLyAvLyAgICAgICA8L2Rpdj5cbi8vIC8vICAgICA8L2Rpdj5cblxuLy8gLy8gICAgIDxzdHlsZSBqc3g+e2Bcbi8vIC8vICAgICAgIEBrZXlmcmFtZXMgZmFkZS1pbiB7XG4vLyAvLyAgICAgICAgIGZyb20geyBvcGFjaXR5OiAwOyB9XG4vLyAvLyAgICAgICAgIHRvIHsgb3BhY2l0eTogMTsgfVxuLy8gLy8gICAgICAgfVxuXG4vLyAvLyAgICAgICBAa2V5ZnJhbWVzIHNsaWRlLXVwIHtcbi8vIC8vICAgICAgICAgZnJvbSB7XG4vLyAvLyAgICAgICAgICAgb3BhY2l0eTogMDtcbi8vIC8vICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMjBweCk7XG4vLyAvLyAgICAgICAgIH1cbi8vIC8vICAgICAgICAgdG8ge1xuLy8gLy8gICAgICAgICAgIG9wYWNpdHk6IDE7XG4vLyAvLyAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuLy8gLy8gICAgICAgICB9XG4vLyAvLyAgICAgICB9XG5cbi8vIC8vICAgICAgIEBrZXlmcmFtZXMgcHJvZ3Jlc3Mge1xuLy8gLy8gICAgICAgICAwJSB7IHdpZHRoOiAwJTsgfVxuLy8gLy8gICAgICAgICAxMDAlIHsgd2lkdGg6IDEwMCU7IH1cbi8vIC8vICAgICAgIH1cblxuLy8gLy8gICAgICAgLmFuaW1hdGUtZmFkZS1pbiB7XG4vLyAvLyAgICAgICAgIGFuaW1hdGlvbjogZmFkZS1pbiAwLjVzIGVhc2Utb3V0IGZvcndhcmRzO1xuLy8gLy8gICAgICAgfVxuXG4vLyAvLyAgICAgICAuYW5pbWF0ZS1zbGlkZS11cCB7XG4vLyAvLyAgICAgICAgIGFuaW1hdGlvbjogc2xpZGUtdXAgMC41cyBlYXNlLW91dCBmb3J3YXJkcztcbi8vIC8vICAgICAgIH1cblxuLy8gLy8gICAgICAgLmFuaW1hdGUtcHJvZ3Jlc3Mge1xuLy8gLy8gICAgICAgICBhbmltYXRpb246IHByb2dyZXNzIDJzIGxpbmVhciBpbmZpbml0ZTtcbi8vIC8vICAgICAgIH1cbi8vIC8vICAgICBgfTwvc3R5bGU+XG4vLyAvLyAgIDwvZGl2PlxuLy8gLy8gKTtcblxuLy8gLy8gZXhwb3J0IGRlZmF1bHQgTG9hZGluZ1NwaW5uZXI7XG5cbi8vIC8vIGNvbnN0IHBlcnNpc3RvciA9IHBlcnNpc3RTdG9yZShzdG9yZSk7XG5cbi8vIC8vIC8vIFByZWxvYWQgY3JpdGljYWwgY29tcG9uZW50cyB3aXRoIGV4cGxpY2l0IGltcG9ydHNcbi8vIC8vIGNvbnN0IHByZWxvYWRDb21wb25lbnRzID0gKCkgPT4ge1xuLy8gLy8gICBjb25zdCBwcmVsb2FkQXBwID0gKCkgPT4gaW1wb3J0KCcuL0FwcC5qc3gnKTtcbi8vIC8vICAgY29uc3QgcHJlbG9hZFRvYXN0ZXIgPSAoKSA9PiBpbXBvcnQoJy4vY29tcG9uZW50cy91aS9zb25uZXIuanN4Jyk7XG5cbi8vIC8vICAgUHJvbWlzZS5hbGwoW1xuLy8gLy8gICAgIHByZWxvYWRBcHAoKSxcbi8vIC8vICAgICBwcmVsb2FkVG9hc3RlcigpXG4vLyAvLyAgIF0pLmNhdGNoKGVycm9yID0+IHtcbi8vIC8vICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcmVsb2FkaW5nIGNvbXBvbmVudHM6JywgZXJyb3IpO1xuLy8gLy8gICB9KTtcbi8vIC8vIH07XG5cbi8vIC8vIC8vIEluaXRpYWxpemUgcm9vdCB3aXRoIGxhenkgbG9hZGluZ1xuLy8gLy8gUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKS5yZW5kZXIoXG4vLyAvLyAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuLy8gLy8gICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuLy8gLy8gICAgICAgPFBlcnNpc3RHYXRlIGxvYWRpbmc9ezxMb2FkaW5nU3Bpbm5lciAvPn0gcGVyc2lzdG9yPXtwZXJzaXN0b3J9PlxuLy8gLy8gICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxMb2FkaW5nU3Bpbm5lciAvPn0+XG4vLyAvLyAgICAgICAgICAgPEFwcCAvPlxuLy8gLy8gICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17bnVsbH0+XG4vLyAvLyAgICAgICAgICAgICA8VG9hc3RlciAvPlxuLy8gLy8gICAgICAgICAgIDwvU3VzcGVuc2U+XG4vLyAvLyAgICAgICAgIDwvU3VzcGVuc2U+XG4vLyAvLyAgICAgICA8L1BlcnNpc3RHYXRlPlxuLy8gLy8gICAgIDwvUHJvdmlkZXI+XG4vLyAvLyAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbi8vIC8vICk7XG5cbi8vIC8vIC8vIFByZWxvYWQgY29tcG9uZW50cyBhZnRlciBpbml0aWFsIHJlbmRlclxuLy8gLy8gaWYgKHR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4vLyAvLyAgIHJlcXVlc3RJZGxlQ2FsbGJhY2socHJlbG9hZENvbXBvbmVudHMpO1xuLy8gLy8gfSBlbHNlIHtcbi8vIC8vICAgc2V0VGltZW91dChwcmVsb2FkQ29tcG9uZW50cywgMTAwMCk7XG4vLyAvLyB9XG4vLyBpbXBvcnQgUmVhY3QsIHsgbGF6eSwgU3VzcGVuc2UgfSBmcm9tIFwicmVhY3RcIjtcbi8vIGltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuLy8gaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbi8vIGltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG4vLyBpbXBvcnQgc3RvcmUgZnJvbSBcIi4vcmVkdXgvc3RvcmUuanNcIjtcbi8vIGltcG9ydCB7IHBlcnNpc3RTdG9yZSB9IGZyb20gXCJyZWR1eC1wZXJzaXN0XCI7XG4vLyBpbXBvcnQgeyBQZXJzaXN0R2F0ZSB9IGZyb20gXCJyZWR1eC1wZXJzaXN0L2ludGVncmF0aW9uL3JlYWN0XCI7XG4vLyBpbXBvcnQgV2F2ZXMgZnJvbSBcIi4vY29tcG9uZW50cy9iYWNrZ3JvdW5kL1dhdmVzXCI7XG4vLyBpbXBvcnQgVHJ1ZUZvY3VzIGZyb20gXCIuL2NvbXBvbmVudHMvYmFja2dyb3VuZC9UcnVlRm9jdXNcIjtcbi8vIGltcG9ydCBBdXJvcmEgZnJvbSBcIi4vY29tcG9uZW50cy9iYWNrZ3JvdW5kL0F1cm9yYVwiO1xuXG4vLyAvLyBMYXp5IGxvYWQgY29tcG9uZW50cyB3aXRoIGV4cGxpY2l0IGltcG9ydHNcbi8vIC8vIEp1c3QgcmVwbGFjZSB0aGUgbGF6eSBpbXBvcnRzIHdpdGggYSBuZXZlci1yZXNvbHZpbmcgUHJvbWlzZVxuLy8gLy8gY29uc3QgQXBwID0gbGF6eSgoKSA9PiBuZXcgUHJvbWlzZSgoKSA9PiB7fSkpO1xuLy8gLy8gY29uc3QgVG9hc3RlciA9IGxhenkoKCkgPT4gbmV3IFByb21pc2UoKCkgPT4ge30pKTtcblxuLy8gY29uc3QgQXBwID0gbGF6eSgoKSA9PiAvKiBAdml0ZS1pZ25vcmUgKi8gaW1wb3J0KCcuL0FwcC5qc3gnKSk7XG4vLyBjb25zdCBUb2FzdGVyID0gbGF6eSgoKSA9PlxuLy8gICBpbXBvcnQoJy4vY29tcG9uZW50cy91aS9zb25uZXIuanN4JykudGhlbihtb2R1bGUgPT4gKHtcbi8vICAgICBkZWZhdWx0OiBtb2R1bGUuVG9hc3RlclxuLy8gICB9KSlcbi8vICk7XG5cbi8vIC8vIFNpbXBsZSBlbXB0eSBkaXYgZm9yIGZhbGxiYWNrIGluc3RlYWQgb2Ygc3Bpbm5lclxuLy8gY29uc3QgRW1wdHlGYWxsYmFjayA9ICgpID0+IChcblxuLy8gICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wganVzdGlmeS1iZXR3ZWVuIG1pbi1oLXNjcmVlblwiPlxuLy8gICAgIHsvKiBUb3AgQXVyb3JhICovfVxuLy8gICAgIDxkaXYgY2xhc3NOYW1lPVwiXCI+XG4vLyAgICAgICA8QXVyb3JhXG4vLyAgICAgICAgIGFtcGxpdHVkZT17Mi4wfVxuLy8gICAgICAgICBjb2xvclN0b3BzPXtbXCIjMjU2M2ViXCIsIFwiIzNiODJmNlwiLCBcIiM2MGE1ZmFcIiwgXCIjOTNjNWZkXCJdfVxuLy8gICAgICAgLz5cbi8vICAgICA8L2Rpdj5cblxuLy8gICAgIHsvKiBDZW50ZXIgQ29udGVudCAqL31cbi8vICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHB5LTQgZm9udC1ib2xkIFwiPlxuLy8gICAgICAgPFRydWVGb2N1c1xuLy8gICAgICAgICBzZW50ZW5jZT1cIldlbGNvbWUgdG8gSGlyZWVzXCJcbi8vICAgICAgICAgbWFudWFsTW9kZT17ZmFsc2V9XG4vLyAgICAgICAgIGJsdXJBbW91bnQ9ezV9XG4vLyAgICAgICAgIGJvcmRlckNvbG9yPVwiIzI1NjNFQlwiXG4vLyAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uPXsyfVxuLy8gICAgICAgICBwYXVzZUJldHdlZW5BbmltYXRpb25zPXsxfVxuLy8gICAgICAgLz5cbi8vICAgICA8L2Rpdj5cblxuLy8gICAgIHsvKiBCb3R0b20gQXVyb3JhICovfVxuLy8gICAgIDxkaXYgY2xhc3NOYW1lPVwicm90YXRlLTE4MCBwYi00XCI+XG4vLyAgICAgICA8QXVyb3JhXG4vLyAgICAgICAgIGFtcGxpdHVkZT17Mi4wfVxuLy8gICAgICAgICBjb2xvclN0b3BzPXtbXCIjMjU2M2ViXCIsIFwiIzNiODJmNlwiLCBcIiM2MGE1ZmFcIiwgXCIjOTNjNWZkXCJdfVxuLy8gICAgICAgLz5cbi8vICAgICA8L2Rpdj5cbi8vICAgPC9kaXY+XG4vLyApO1xuXG5cbi8vIGNvbnN0IHBlcnNpc3RvciA9IHBlcnNpc3RTdG9yZShzdG9yZSk7XG5cbi8vIC8vIFByZWxvYWQgY3JpdGljYWwgY29tcG9uZW50cyB3aXRoIGV4cGxpY2l0IGltcG9ydHNcbi8vIGNvbnN0IHByZWxvYWRDb21wb25lbnRzID0gKCkgPT4ge1xuLy8gICBjb25zdCBwcmVsb2FkQXBwID0gKCkgPT4gaW1wb3J0KFwiLi9BcHAuanN4XCIpO1xuLy8gICBjb25zdCBwcmVsb2FkVG9hc3RlciA9ICgpID0+IGltcG9ydChcIi4vY29tcG9uZW50cy91aS9zb25uZXIuanN4XCIpO1xuXG4vLyAgIFByb21pc2UuYWxsKFtwcmVsb2FkQXBwKCksIHByZWxvYWRUb2FzdGVyKCldKS5jYXRjaCgoZXJyb3IpID0+IHtcbi8vICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcHJlbG9hZGluZyBjb21wb25lbnRzOlwiLCBlcnJvcik7XG4vLyAgIH0pO1xuLy8gfTtcblxuLy8gLy8gSW5pdGlhbGl6ZSByb290IHdpdGggbGF6eSBsb2FkaW5nIGJ1dCBubyB2aXNpYmxlIGxvYWRlclxuLy8gUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpLnJlbmRlcihcbi8vICAgPFJlYWN0LlN0cmljdE1vZGU+XG4vLyAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4vLyAgICAgICA8UGVyc2lzdEdhdGUgbG9hZGluZz17PEVtcHR5RmFsbGJhY2sgLz59IHBlcnNpc3Rvcj17cGVyc2lzdG9yfT5cbi8vICAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8RW1wdHlGYWxsYmFjayAvPn0+XG4vLyAgICAgICAgICAgPEFwcCAvPlxuLy8gICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17bnVsbH0+XG4vLyAgICAgICAgICAgICA8VG9hc3RlciAvPlxuLy8gICAgICAgICAgIDwvU3VzcGVuc2U+XG4vLyAgICAgICAgIDwvU3VzcGVuc2U+XG4vLyAgICAgICA8L1BlcnNpc3RHYXRlPlxuLy8gICAgIDwvUHJvdmlkZXI+XG4vLyAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbi8vICk7XG5cbi8vIC8vIFByZWxvYWQgY29tcG9uZW50cyBhZnRlciBpbml0aWFsIHJlbmRlclxuLy8gaWYgKHR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbi8vICAgcmVxdWVzdElkbGVDYWxsYmFjayhwcmVsb2FkQ29tcG9uZW50cyk7XG4vLyB9IGVsc2Uge1xuLy8gICBzZXRUaW1lb3V0KHByZWxvYWRDb21wb25lbnRzLCAxMDAwKTtcbi8vIH1cbmltcG9ydCBSZWFjdCwgeyBsYXp5LCBTdXNwZW5zZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9yZWR1eC9zdG9yZS5qc1wiO1xuaW1wb3J0IHsgcGVyc2lzdFN0b3JlIH0gZnJvbSBcInJlZHV4LXBlcnNpc3RcIjtcbmltcG9ydCB7IFBlcnNpc3RHYXRlIH0gZnJvbSBcInJlZHV4LXBlcnNpc3QvaW50ZWdyYXRpb24vcmVhY3RcIjtcblxuLy8gTGF6eSBsb2FkIGNvbXBvbmVudHNcbmNvbnN0IEFwcCA9IGxhenkoKCkgPT4gaW1wb3J0KCcuL0FwcC5qc3gnKSk7XG5jb25zdCBUb2FzdGVyID0gbGF6eSgoKSA9PlxuICBpbXBvcnQoJy4vY29tcG9uZW50cy91aS9zb25uZXIuanN4JykudGhlbihtb2R1bGUgPT4gKHtcbiAgICBkZWZhdWx0OiBtb2R1bGUuVG9hc3RlclxuICB9KSlcbik7XG5cbi8vIEN1c3RvbSBMYW5kaW5nIFBhZ2Ugd2l0aG91dCBBdXJvcmEgYW5kIEJhY2tncm91bmQgQW5pbWF0aW9uc1xuY29uc3QgTGFuZGluZ1BhZ2UgPSAoKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwibWluLWgtc2NyZWVuIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1ibHVlLTYwMCB0by1ibHVlLTgwMCBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB0ZXh0LXdoaXRlXCI+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBweS0xNiBweC00XCI+XG4gICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC01eGwgZm9udC1leHRyYWJvbGQgbWItNFwiPlxuICAgICAgICBXZWxjb21lIHRvIEhpcmVlc1xuICAgICAgPC9oMT5cbiAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbGcgbWItOFwiPlxuICAgICAgICBZb3VyIG5leHQgam9iIGlzIGp1c3QgYSBjbGljayBhd2F5LiBFeHBsb3JlIG9wcG9ydHVuaXRpZXMsIGZpbmQgeW91ciBkcmVhbSBqb2IsIGFuZCBjb25uZWN0IHdpdGggdG9wIGVtcGxveWVycy5cbiAgICAgIDwvcD5cbiAgICAgIDxhXG4gICAgICAgIGhyZWY9XCIjZXhwbG9yZVwiXG4gICAgICAgIGNsYXNzTmFtZT1cImJnLXllbGxvdy01MDAgdGV4dC1ibGFjayBmb250LXNlbWlib2xkIHB4LTggcHktMyByb3VuZGVkLWZ1bGwgc2hhZG93LWxnIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBob3ZlcjpiZy15ZWxsb3ctNDAwIHRyYW5zZm9ybSBob3ZlcjpzY2FsZS0xMDVcIlxuICAgICAgPlxuICAgICAgICBFeHBsb3JlIE9wcG9ydHVuaXRpZXNcbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cblxuICAgIHsvKiBGb290ZXIgb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiAoaWYgbmVjZXNzYXJ5KSAqL31cbiAgICA8Zm9vdGVyIGNsYXNzTmFtZT1cImJnLWdyYXktODAwIHRleHQtY2VudGVyIHRleHQtd2hpdGUgcHktNCB3LWZ1bGwgbXQtMTZcIj5cbiAgICAgIDxwPsKpIDIwMjUgSGlyZWVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLjwvcD5cbiAgICA8L2Zvb3Rlcj5cbiAgPC9kaXY+XG4pO1xuXG5jb25zdCBwZXJzaXN0b3IgPSBwZXJzaXN0U3RvcmUoc3RvcmUpO1xuXG4vLyBQcmVsb2FkIGNyaXRpY2FsIGNvbXBvbmVudHNcbmNvbnN0IHByZWxvYWRDb21wb25lbnRzID0gKCkgPT4ge1xuICBjb25zdCBwcmVsb2FkQXBwID0gKCkgPT4gaW1wb3J0KFwiLi9BcHAuanN4XCIpO1xuICBjb25zdCBwcmVsb2FkVG9hc3RlciA9ICgpID0+IGltcG9ydChcIi4vY29tcG9uZW50cy91aS9zb25uZXIuanN4XCIpO1xuXG4gIFByb21pc2UuYWxsKFtwcmVsb2FkQXBwKCksIHByZWxvYWRUb2FzdGVyKCldKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcHJlbG9hZGluZyBjb21wb25lbnRzOlwiLCBlcnJvcik7XG4gIH0pO1xufTtcblxuLy8gSW5pdGlhbGl6ZSByb290IHdpdGggbGF6eSBsb2FkaW5nXG5SZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSkucmVuZGVyKFxuICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxQZXJzaXN0R2F0ZSBsb2FkaW5nPXs8TGFuZGluZ1BhZ2UgLz59IHBlcnNpc3Rvcj17cGVyc2lzdG9yfT5cbiAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8TGFuZGluZ1BhZ2UgLz59PlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9e251bGx9PlxuICAgICAgICAgICAgPFRvYXN0ZXIgLz5cbiAgICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgPC9QZXJzaXN0R2F0ZT5cbiAgICA8L1Byb3ZpZGVyPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+XG4pO1xuXG4vLyBQcmVsb2FkIGNvbXBvbmVudHMgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcbmlmICh0eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIHJlcXVlc3RJZGxlQ2FsbGJhY2socHJlbG9hZENvbXBvbmVudHMpO1xufSBlbHNlIHtcbiAgc2V0VGltZW91dChwcmVsb2FkQ29tcG9uZW50cywgMTAwMCk7XG59XG4iXSwiZmlsZSI6Ii9Vc2Vycy9uYXZhbC9EZXNrdG9wL2ludGVybnNoaXAvam9icG9ydGFsX2RldmVsb3BtZW50L0pPYlBvcnRhbF9EeU5hbW9fY2xlYW4vZnJvbnRlbmQvc3JjL21haW4uanN4In0=